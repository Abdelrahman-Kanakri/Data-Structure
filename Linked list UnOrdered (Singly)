#include <iostream>
#include <cassert>
using namespace std;

struct nodeType
{
    int info;
    nodeType* link;
};

//****************************
class linkedListType
{
public:
    const linkedListType& operator=(const linkedListType&);
    void initializeList(); // Function to initialize the list, making it empty.
    bool isEmptyList() const; // Function to check if the list is empty.
    void print() const; // Function to print the elements of the list.
    void reversePrint() const; // Function to print the elements of the list in reverse manner.
    int length() const; // Function to return the length of the list.
    void destroyList(); // Function to delete all nodes in the list.
    int front() const; // Function to return the first element of the list.
    int back() const; // Function to return the last element of the list.
    virtual bool search(const int& searchItem) const = 0; // Pure virtual function to search for an item in the list.
    virtual void insertFirst(const int& newItem) = 0; // Pure virtual function to insert an item at the beginning of the list.
    virtual void insertLast(const int& newItem) = 0; // Pure virtual function to insert an item at the end of the list.
    virtual void deleteNode(const int& deleteItem) = 0; // Pure virtual function to delete a node from the list.
    linkedListType(); // Default constructor.
    linkedListType(const linkedListType& otherList); // Copy constructor.
    ~linkedListType(); // Destructor.
protected:
    int count; // Number of elements in the list.
    nodeType* first; // Pointer to the first node of the list.
    nodeType* last; // Pointer to the last node of the list.
private:
    void copyList(const linkedListType& otherList); // Function to copy the contents of another list.
    void reversePrintHelper(nodeType* current) const; // Helper function for reverse printing.
};


bool linkedListType::isEmptyList() const
{
    return (first == NULL);
}


linkedListType::linkedListType() //default constructor
{
    first = NULL;
    last = NULL;
    count = 0;
}


void linkedListType::destroyList()
{
    nodeType* temp;   //pointer to deallocate the memory
    //occupied by the node
    while (first != NULL)   //while there are nodes in the list
    {
        temp = first;        //set temp to the current node
        first = first->link; //advance first to the next node
        delete temp;   //deallocate the memory occupied by temp
    }

    last = NULL; //initialize last to NULL; first has already
    //been set to NULL by the while loop
    count = 0;
}


void linkedListType::initializeList()
{
    destroyList(); //if the list has any nodes, delete them
}


void linkedListType::print() const
{
    nodeType* current; //pointer to traverse the list

    current = first;    //set current so that it points to 
    //the first node
    while (current != NULL) //while more data to print
    {
        cout << current->info << " ";
        current = current->link;
    }
    cout << endl;
}//end print

void linkedListType::reversePrint() const
{
    reversePrintHelper(first);
    cout << endl;
}

void linkedListType::reversePrintHelper(nodeType* current) const
{
    if (current != NULL)
    {
        reversePrintHelper(current->link);
        cout << current->info << " ";
    }
}//end reversePrintHelper

int linkedListType::length() const
{
    return count;
}  //end length


int linkedListType::front() const
{
    assert(first != NULL);

    return first->info; //return the info of the first node	
}//end front


int linkedListType::back() const
{
    assert(last != NULL);

    return last->info; //return the info of the last node	
}//end back



void linkedListType::copyList(const linkedListType& otherList)
{
    if (first != NULL) //if the list is nonempty, make it empty
        destroyList();

    if (otherList.first == NULL) //otherList is empty
    {
        first = NULL;
        last = NULL;
        count = 0;
    }
    else
    {
        count = otherList.count;

        nodeType* newNode; //pointer to create a node
        nodeType* current; //pointer to traverse the list
        current = otherList.first; //current points to the 
        //list to be copied
//copy the first node
        first = new nodeType;  //create the node

        first->info = current->info; //copy the info
        first->link = NULL;        //set the link field of 
        //the node to NULL
        last = first;              //make last point to the
        //first node
        current = current->link;     //make current point to
        //the next node

//copy the remaining list
        while (current != NULL)
        {
            newNode = new nodeType;  //create a node
            newNode->info = current->info; //copy the info
            newNode->link = NULL;       //set the link of 
            //newNode to NULL
            last->link = newNode;  //attach newNode after last
            last = newNode;        //make last point to
            //the actual last node
            current = current->link;   //make current point 
            //to the next node
        }//end while
    }//end else
}//end copyList


linkedListType::~linkedListType() //destructor
{
    destroyList();
}//end destructor


linkedListType::linkedListType(const linkedListType& otherList)
{
    first = NULL;
    copyList(otherList);
}//end copy constructor


const linkedListType& linkedListType::operator=(const linkedListType& otherList)
{
    if (this != &otherList) //avoid self-copy
    {
        copyList(otherList);
    }//end else

    return *this;
}
//**************************************************************************************
class unorderedLinkedList : public linkedListType
{
public:
    bool search(const int& searchItem) const;
    void insertFirst(const int& newItem);
    void insertLast(const int& newItem);
    void deleteNode(const int& deleteItem);
};



bool unorderedLinkedList::search(const int& searchItem) const
{
    nodeType* current; //pointer to traverse the list
    bool found = false;

    current = first; //set current to point to the first 
    //node in the list

    while (current != NULL && !found)    //search the list
        if (current->info == searchItem) //searchItem is found
            found = true;
        else
            current = current->link; //make current point to
    //the next node
    return found;
}//end search

void unorderedLinkedList::insertFirst(const int& newItem)
{
    nodeType* newNode; //pointer to create the new node

    newNode = new nodeType; //create the new node

    newNode->info = newItem;    //store the new item in the node
    newNode->link = first;      //insert newNode before first
    first = newNode;            //make first point to the
    //actual first node
    count++;                    //increment count

    if (last == NULL)   //if the list was empty, newNode is also 
        //the last node in the list
        last = newNode;
}//end insertFirst


void unorderedLinkedList::insertLast(const int& newItem)
{
    nodeType* newNode; //pointer to create the new node

    newNode = new nodeType; //create the new node

    newNode->info = newItem;  //store the new item in the node
    newNode->link = NULL;     //set the link field of newNode
    //to NULL

    if (first == NULL)  //if the list is empty, newNode is 
        //both the first and last node
    {
        first = newNode;
        last = newNode;
        count++;        //increment count
    }
    else    //the list is not empty, insert newNode after last
    {
        last->link = newNode; //insert newNode after last
        last = newNode; //make last point to the actual 
        //last node in the list
        count++;        //increment count
    }
}//end insertLast


void unorderedLinkedList::deleteNode(const int& deleteItem)
{
    nodeType* current; //pointer to traverse the list
    nodeType* trailCurrent; //pointer just before current
    bool found;

    if (first == NULL)    //Case 1;
        if (first == NULL)    //Case 1; the list is empty. 
        {
            cout << "Cannot delete from an empty list." << endl;
        }
        else
        {
            if (first->info == deleteItem) //Case 2; the node to be deleted is the first node
            {
                current = first;
                first = first->link;
                count--;
                if (first == NULL)    //the list has only one node
                    last = NULL;
                delete current;
            }
            else //search the list for the node with the given info
            {
                found = false;
                trailCurrent = first;  //set trailCurrent to point to the first node
                current = first->link; //set current to point to the second node

                while (current != NULL && !found)
                {
                    if (current->info != deleteItem)
                    {
                        trailCurrent = current;
                        current = current->link;
                    }
                    else
                    {
                        found = true;
                    }
                }//end while

                if (found) //Case 3; if found, delete the node
                {
                    trailCurrent->link = current->link;
                    count--;

                    if (last == current)   //node to be deleted was the last node
                    {
                        last = trailCurrent; //update the value of last
                    }
                    delete current;  //delete the node from the list
                }
                else
                {
                    cout << "The item to be deleted is not in the list." << endl;
                }
            }//end else
        }//end else
}//end deleteNode


int main()
{
    unorderedLinkedList l;
    l.insertFirst(5); // Insert 5 at the beginning of the list.
    l.insertFirst(4); // Insert 4 at the beginning of the list.
    l.insertLast(6); // Insert 6 at the end of the list.
    cout << "List: ";
    l.print(); // Print the elements of the list.

    cout << "Reversed List: ";
    l.reversePrint(); // Print the elements of the list in reverse order.

    l.deleteNode(5); // Delete the node with value 5
    cout << "List after deleting 5: ";
    l.print(); // Print the elements of the list after deletion.

    l.deleteNode(4); // Delete the node with value 4
    cout << "List after deleting 4: ";
    l.print(); // Print the elements of the list after deletion.

    l.deleteNode(6); // Delete the node with value 6
    cout << "List after deleting 6: ";
    l.print(); // Print the elements of the list after deletion.

    return 0;
}
