#include<iostream>
using namespace std;

const int MAX_SIZE = 100;

template<class t>
class stack {
    int stackTop; // Index pointing to the top element
    t item[MAX_SIZE]; // Array to store stack elements

public:
    stack() {
        stackTop = 0; // Initialize stackTop to 0
    }

    bool isEmpty() {
        return stackTop == 0; // Check if stackTop is at the bottom of the stack
    }

    bool isFull() {
        return stackTop == MAX_SIZE; // Check if stackTop has reached the maximum size
    }

    void push(t Element) {
        if (isFull()) {
            cout << "Stack full on push" << endl; // Check if the stack is full
        } else {
            item[stackTop++] = Element; // Add Element to the top of the stack and increment stackTop
        }
    }

    void pop() {
        if (isEmpty()) {
            cout << "stack empty on pop" << endl; // Check if the stack is empty
        } else {
            stackTop--; // Decrement stackTop to remove the top element
        }
    }

    void pop(t& Element) {
        if (isEmpty()) {
            cout << "stack empty on pop" << endl; // Check if the stack is empty
        } else {
            Element = item[--stackTop]; // Retrieve and remove the top element, then decrement stackTop
            cout << "The deleted item: " << Element << endl;
        }
    }

    void getTop(t& Top) {
        if (isEmpty()) {
            cout << "stack empty on getTop" << endl; // Check if the stack is empty
        } else {
            Top = item[stackTop - 1]; // Retrieve the top element without removing it
            cout << "The top is : " << Top << endl;
        }
    }

    void print() {
        cout << "[ ";
        for (int i = stackTop - 1; i >= 0; i--) {
            cout << item[i] << " "; // Print stack elements from top to bottom
        }
        cout << "]" << endl;
    }

    void length() {
        cout << "The number of elements in the stack is : " << stackTop; // Print the number of elements in the stack
    }
};

int main() {
    stack<int> s;
    int x = 0;
    s.push(5);
    s.push(15);
    s.push(20);
    s.push(30);
    s.print(); // Print the stack
    s.getTop(x); // Get the top element
    s.length(); // Get the length of the stack
}
